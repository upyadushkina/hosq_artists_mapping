import streamlit as st
import pandas as pd
from pyvis.network import Network
import networkx as nx
import tempfile

# --- –°—Ç–∏–ª–∏–∑–∞—Ü–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã ---
st.set_page_config(page_title="–ì—Ä–∞—Ñ —Ö—É–¥–æ–∂–Ω–∏–∫–æ–≤", layout="wide")
st.markdown("""
    <style>
    body {
        background-color: #262123;
    }
    .stSidebar {
        background-color: #4C4646;
    }
    .stMultiSelect>div>div {
        background-color: #262123;
        color: #E8DED3;
    }
    .stMultiSelect [data-baseweb="tag"] {
        background-color: #6A50FF !important;
        color: #262123 !important;
    }
    .stSelectbox, .stMultiSelect {
        color: #E8DED3;
    }
    </style>
""", unsafe_allow_html=True)

# –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ
def load_data():
    return pd.read_csv("graph_edges.csv")

df = load_data()

# –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ü–≤–µ—Ç–∞ –¥–ª—è —É–∑–ª–æ–≤
source_color = "#4C4646"
type_colors = {
    "–î–∏—Å—Ü–∏–ø–ª–∏–Ω–∞": "#6A50FF",
    "–†–æ–ª—å": "#975AB2",
    "–°—Ç–∏–ª—å": "#B3A0EB",
    "–ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç": "#EEC0E7",
    "–Ø–∑—ã–∫": "#E5B8AB",
    "–û–ø—ã—Ç": "#D3DAE8",
    "–ì–æ—Ä–æ–¥": "#B1D3AA",
    "–ò—â—É": "#F4C07C",
    "–ö—É—Ä–∞—Ç–æ—Ä": "#EC7F4D",
    "–î—Ä—É–≥–æ–µ": "#CD5373"
}

# --- –ë–æ–∫–æ–≤–∞—è –ø–∞–Ω–µ–ª—å —Å —Ñ–∏–ª—å—Ç—Ä–∞–º–∏ ---
st.sidebar.header("üîç –§–∏–ª—å—Ç—Ä—ã")
selected_discipline = st.sidebar.multiselect("–í—ã–±–µ—Ä–∏—Ç–µ –¥–∏—Å—Ü–∏–ø–ª–∏–Ω—É", df[df["type"] == "–î–∏—Å—Ü–∏–ø–ª–∏–Ω–∞"]["target"].unique())
selected_role = st.sidebar.multiselect("–í—ã–±–µ—Ä–∏—Ç–µ —Ä–æ–ª—å", df[df["type"] == "–†–æ–ª—å"]["target"].unique())
selected_style = st.sidebar.multiselect("–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç–∏–ª—å", df[df["type"] == "–°—Ç–∏–ª—å"]["target"].unique())
selected_instrument = st.sidebar.multiselect("–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç", df[df["type"] == "–ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç"]["target"].unique())
selected_language = st.sidebar.multiselect("–í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫ –æ–±—â–µ–Ω–∏—è", df[df["type"] == "–Ø–∑—ã–∫"]["target"].unique())
selected_experience = st.sidebar.multiselect("–í—ã–±–µ—Ä–∏—Ç–µ –æ–ø—ã—Ç", df[df["type"] == "–û–ø—ã—Ç"]["target"].unique())
selected_city = st.sidebar.multiselect("–í—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ä–æ–¥", df[df["type"] == "–ì–æ—Ä–æ–¥"]["target"].unique())
selected_seeking = st.sidebar.multiselect("–í—ã–±–µ—Ä–∏—Ç–µ '–ò—â—É'", df[df["type"] == "–ò—â—É"]["target"].unique())

# –ö–Ω–æ–ø–∫–∞ —Å–±—Ä–æ—Å–∞ —Ñ–∏–ª—å—Ç—Ä–æ–≤
if st.sidebar.button("–°–±—Ä–æ—Å–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä—ã"):
    selected_discipline = []
    selected_role = []
    selected_style = []
    selected_instrument = []
    selected_language = []
    selected_experience = []
    selected_city = []
    selected_seeking = []

# --- –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö ---
filters = [
    (selected_discipline, "–î–∏—Å—Ü–∏–ø–ª–∏–Ω–∞"),
    (selected_role, "–†–æ–ª—å"),
    (selected_style, "–°—Ç–∏–ª—å"),
    (selected_instrument, "–ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç"),
    (selected_language, "–Ø–∑—ã–∫"),
    (selected_experience, "–û–ø—ã—Ç"),
    (selected_city, "–ì–æ—Ä–æ–¥"),
    (selected_seeking, "–ò—â—É")
]

filtered_sources = set(df["source"])
for selected_values, filter_type in filters:
    if selected_values:
        matched_sources = df[(df["type"] == filter_type) & (df["target"].isin(selected_values))]["source"].unique()
        filtered_sources &= set(matched_sources)

# –ï—Å–ª–∏ —Ñ–∏–ª—å—Ç—Ä—ã –ø—É—Å—Ç—ã ‚Äî –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º –≤—Å–µ—Ö
if not any(sel for sel, _ in filters):
    filtered_sources = set(df["source"])

# –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Å–≤—è–∑–∏ —Ç–æ–ª—å–∫–æ –¥–ª—è –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö —Ö—É–¥–æ–∂–Ω–∏–∫–æ–≤
filtered_df = df[df["source"].isin(filtered_sources)]

# --- –°–æ–∑–¥–∞—ë–º –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π –≥—Ä–∞—Ñ —Å pyvis ---
net = Network(height="1000px", width="100%", bgcolor="#262123", font_color="white")

for _, row in filtered_df.iterrows():
    net.add_node(row["source"], label=row["source"], color=source_color, size=15)
    net.add_node(row["target"], label=row["target"], color=type_colors.get(row["type"], "#CD5373"), size=10)
    net.add_edge(row["source"], row["target"], color="#AAAAAA")

net.toggle_physics(True)

# –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏ –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º –≥—Ä–∞—Ñ
temp_file = tempfile.NamedTemporaryFile(delete=False, suffix=".html")
net.save_graph(temp_file.name)
st.components.v1.html(open(temp_file.name, "r", encoding="utf-8").read(), height=1000)

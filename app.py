import streamlit as st
import pandas as pd
from pyvis.network import Network
import networkx as nx
import tempfile

# –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ
def load_data():
    return pd.read_csv("graph_edges.csv")

df = load_data()

# –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ü–≤–µ—Ç–∞ –¥–ª—è —É–∑–ª–æ–≤
source_color = "#4C4646"
type_colors = {
    "–î–∏—Å—Ü–∏–ø–ª–∏–Ω–∞": "#6A50FF",
    "–†–æ–ª—å": "#975AB2",
    "–°—Ç–∏–ª—å": "#B3A0EB",
    "–ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç": "#EEC0E7",
    "–Ø–∑—ã–∫": "#E5B8AB",
    "–û–ø—ã—Ç": "#D3DAE8",
    "–ì–æ—Ä–æ–¥": "#B1D3AA",
    "–ò—â—É": "#F4C07C",
    "–ö—É—Ä–∞—Ç–æ—Ä": "#EC7F4D",
    "–î—Ä—É–≥–æ–µ": "#CD5373"
}

# –§–∏–ª—å—Ç—Ä—ã
st.sidebar.header("üîç –§–∏–ª—å—Ç—Ä—ã")
selected_discipline = st.sidebar.multiselect("–í—ã–±–µ—Ä–∏—Ç–µ –¥–∏—Å—Ü–∏–ø–ª–∏–Ω—É", df[df["type"] == "–î–∏—Å—Ü–∏–ø–ª–∏–Ω–∞"]["target"].unique())
selected_role = st.sidebar.multiselect("–í—ã–±–µ—Ä–∏—Ç–µ —Ä–æ–ª—å", df[df["type"] == "–†–æ–ª—å"]["target"].unique())
selected_style = st.sidebar.multiselect("–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç–∏–ª—å", df[df["type"] == "–°—Ç–∏–ª—å"]["target"].unique())
selected_instrument = st.sidebar.multiselect("–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç", df[df["type"] == "–ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç"]["target"].unique())
selected_language = st.sidebar.multiselect("–í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫ –æ–±—â–µ–Ω–∏—è", df[df["type"] == "–Ø–∑—ã–∫"]["target"].unique())
selected_experience = st.sidebar.multiselect("–í—ã–±–µ—Ä–∏—Ç–µ –æ–ø—ã—Ç", df[df["type"] == "–û–ø—ã—Ç"]["target"].unique())
selected_city = st.sidebar.multiselect("–í—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ä–æ–¥", df[df["type"] == "–ì–æ—Ä–æ–¥"]["target"].unique())
selected_seeking = st.sidebar.multiselect("–í—ã–±–µ—Ä–∏—Ç–µ '–ò—â—É'", df[df["type"] == "–ò—â—É"]["target"].unique())

# –ö–Ω–æ–ø–∫–∞ —Å–±—Ä–æ—Å–∞ —Ñ–∏–ª—å—Ç—Ä–æ–≤
if st.sidebar.button("–°–±—Ä–æ—Å–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä—ã"):
    selected_discipline = []
    selected_role = []
    selected_style = []
    selected_instrument = []
    selected_language = []
    selected_experience = []
    selected_city = []
    selected_seeking = []

# –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ—Ö —Ö—É–¥–æ–∂–Ω–∏–∫–æ–≤ (source), —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏—Ö —Ö–æ—Ç—è –±—ã –æ–¥–Ω–æ–º—É —Ñ–∏–ª—å—Ç—Ä—É
filtered_sources = set(df["source"])
filters = [
    selected_discipline, selected_role, selected_style, selected_instrument, 
    selected_language, selected_experience, selected_city, selected_seeking
]

for selected in filters:
    if selected:
        matching_sources = set(df[df["target"].isin(selected)]["source"])
        filtered_sources &= matching_sources  # –ë–µ—Ä–µ–º –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏–µ, —á—Ç–æ–±—ã –æ—Å—Ç–∞–≤–∏—Ç—å —Ç–æ–ª—å–∫–æ –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö

# –ï—Å–ª–∏ –Ω–∏ –æ–¥–∏–Ω —Ñ–∏–ª—å—Ç—Ä –Ω–µ –≤—ã–±—Ä–∞–Ω, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–µ—Ö —Ö—É–¥–æ–∂–Ω–∏–∫–æ–≤
if not any(filters):
    filtered_sources = set(df["source"])

# –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –≤—Å–µ —Å–≤—è–∑–∏ —Ö—É–¥–æ–∂–Ω–∏–∫–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –æ—Å—Ç–∞–ª–∏—Å—å –ø–æ—Å–ª–µ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
filtered_df = df[df["source"].isin(filtered_sources)]

# –°–æ–∑–¥–∞—ë–º –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π –≥—Ä–∞—Ñ —Å pyvis
net = Network(height="700px", width="100%", bgcolor="#262123", font_color="white")

# –î–æ–±–∞–≤–ª—è–µ–º —É–∑–ª—ã –∏ —Å–≤—è–∑–∏
for _, row in filtered_df.iterrows():
    net.add_node(row["source"], label=row["source"], color=source_color, size=15)
    net.add_node(row["target"], label=row["target"], color=type_colors.get(row["type"], "#CD5373"), size=10)
    net.add_edge(row["source"], row["target"], color="#AAAAAA")

# –í–∫–ª—é—á–∞–µ–º —Ñ–∏–∑–∏–∫—É –¥–ª—è –∞–Ω–∏–º–∞—Ü–∏–∏ –¥–≤–∏–∂–µ–Ω–∏—è —É–∑–ª–æ–≤
net.toggle_physics(True)

# –°–æ—Ö—Ä–∞–Ω—è–µ–º –≥—Ä–∞—Ñ –≤–æ –≤—Ä–µ–º–µ–Ω–Ω—ã–π HTML-—Ñ–∞–π–ª
temp_file = tempfile.NamedTemporaryFile(delete=False, suffix=".html")
net.save_graph(temp_file.name)

# –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –≥—Ä–∞—Ñ –≤ Streamlit
st.components.v1.html(open(temp_file.name, "r", encoding="utf-8").read(), height=700)
